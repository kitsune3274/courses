
Цель домашнего задания
Научиться использовать:
•	структуры,
•	классы,
•	разные типы свойств,
•	модификаторы доступа.

Что нужно сделать
Для решения задач создайте новый файл Playground, выполните в нём все задания и отправьте на проверку.

Задание 1
Дана структура Person:
 
struct Person {
    var name: String
    var age: Int

 
    func getAgeComparisonString(_ p: Person) -> String {
        // Ваш код должен быть здесь

    }
}
 
Допишите метод в структуре Person, который сравнивает возраст. 
Должны выполняться следующие условия:
    1. Формат строки со сравнением:
{Имя другого человека} {старше меня / моложе меня / такого же возраста, как я}.
 
    2. Ваш код должен работать следующим образом:
p1 = Person("Антон", 24)
p2 = Person("Андрей", 36)
p3 = Person("Ольга", 24)

p1.getAgeComparisonString(p2) ➞ "Андрей старше меня"
p2.getAgeComparisonString(p1) ➞ "Антон младше меня"
p1.getAgeComparisonString(p3) ➞ "Ольга такого же возраста, как и я"

Задание 2
Добавьте в структуру Person ленивое свойство, которое возвращает человека в виде строки следующего формата {Имя} {Возраст} {года/лет}.
 
Пример:
p1 = Person("Антон", 24)
p1.info -> Антон 24 года

p2 = Person("Андрей", 36)
p2.info -> Андрей 36 лет

Задание 3
Создайте класс Hero. Добавьте свойство «количество жизней» — lifeCount. Количество жизней задаётся при создании героя в инициализаторе. Добавьте метод «попадание», который уменьшает количество жизней, — hit().

Задание 4
Добавьте в класс Hero вычисляемое свойство, жив или нет герой, — isLive. Если количество жизней больше 0, то возвращает true, в остальных случаях false.

Задание 5
Поставьте модификатор доступа private рядом с переменной «количество жизней» в классе Hero, чтобы менять количество жизней можно было только с помощью метода hit().

Задание 6
Отнаследуйтесь от класса Hero, создав дочерний класс SuperHero. Переопределите метод «попадание» для нового класса так, чтобы SuperHero не получал повреждения.

Советы и рекомендации
Для выполнения заданий ознакомьтесь с официальной документацией по языку Swift.org.

Что оценивается
•	Все задания выполнены в соответствии с описанными условиями.
•	Учтены рекомендации и подсказки.
•	Код работает корректно и возвращает описанный в задании результат.

Как отправить задания на проверку
Пришлите преподавателю на проверку файл Playground с выполненными заданиями.

